{
	"name": "P_DATAEXTRACTION_SAP_HANA_DELTA_TO_ADLS",
	"properties": {
		"activities": [
			{
				"name": "Lookup_ProcessConfig_Table",
				"description": "Reading Water Mark Table to get the LAST_DTM.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureDatabricksDeltaLakeSource",
						"query": {
							"value": "@concat('SELECT * FROM `',pipeline().globalParameters.GL_CONFIG_CATALOG_NAME,'`.`raw-ds-gsap`.',pipeline().globalParameters.GL_CONFIG_TABLE_NAME, ' WHERE load_type = \"DELTA_LOAD\" and  table_name not in (\"CSKA\",\"CSKU\",\"LFA1\")')",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "DS_ADB_DELTALAKE",
						"type": "DatasetReference",
						"parameters": {
							"Databricks_Workspace_URL": {
								"value": "@pipeline().globalParameters.GL_DATABRICKS_URL",
								"type": "Expression"
							},
							"Cluster_id": {
								"value": "@pipeline().globalParameters.GL_CLUSTER_ID",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_Table",
				"description": "Iterate to get the Table Name and Target path from Watermark Table",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup_ProcessConfig_Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_ProcessConfig_Table').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Copy_Deltadata_Extraction_Hana",
							"description": "Extracting Delta Data from SAP Hana ",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SapHanaSource",
									"query": {
										"value": "@concat('SELECT * FROM ',item().SCHEMA_NAME, '.',item().TABLE_NAME,' WHERE LAST_DTM >=',item().LAST_DTM)",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_GSAP_HANA",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLS_LANDING",
									"type": "DatasetReference",
									"parameters": {
										"File_Name": {
											"value": "@concat(item().TABLE_NAME,'_', formatDateTime(convertTimeZone(utcnow(),'UTC', 'India standard Time'),'yyyyMMdd_HHmmss'),'_','001','.parquet')",
											"type": "Expression"
										},
										"Folder_Name": {
											"value": "@item().TARGET_PATH",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Update the last_dtm in Configuration table",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "Wait Activity to avoid the concurrent failures",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@concat(pipeline().globalParameters.GL_REPOS_PATH,'dlt_pipelines/read_hana_delta_table')",
									"type": "Expression"
								},
								"baseParameters": {
									"target_path": {
										"value": "@item().TARGET_PATH",
										"type": "Expression"
									},
									"table_name": {
										"value": "@item().TABLE_NAME",
										"type": "Expression"
									},
									"env": {
										"value": "@pipeline().globalParameters.GL_ENV",
										"type": "Expression"
									},
									"unique_repo_branch_id": {
										"value": "@pipeline().globalParameters.GL_UNIQUE_REPO_BRANCH_ID",
										"type": "Expression"
									},
									"repos_path": {
										"value": "@pipeline().globalParameters.GL_REPOS_PATH",
										"type": "Expression"
									},
									"config_table_name": {
										"value": "@pipeline().globalParameters.GL_CONFIG_TABLE_NAME",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_DATABRICKS",
								"type": "LinkedServiceReference",
								"parameters": {
									"Databricks_Workspace_URL": {
										"value": "@pipeline().globalParameters.GL_DATABRICKS_URL",
										"type": "Expression"
									},
									"Cluster_id": {
										"value": "@pipeline().globalParameters.GL_CLUSTER_ID",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Wait Activity to avoid the concurrent failures",
							"type": "Wait",
							"dependsOn": [
								{
									"activity": "Copy_Deltadata_Extraction_Hana",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 3
							}
						}
					]
				}
			},
			{
				"name": "Trigger the ADB DLT Workflow Job",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "ForEach_Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": {
						"value": "@concat(pipeline().globalParameters.GL_REPOS_PATH,'dlt_pipelines/get_adb_workflow_job_list')",
						"type": "Expression"
					},
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.GL_ENV",
							"type": "Expression"
						},
						"repos_path": {
							"value": "@pipeline().globalParameters.GL_REPOS_PATH",
							"type": "Expression"
						},
						"unique_repo_branch_id": {
							"value": "@pipeline().globalParameters.GL_UNIQUE_REPO_BRANCH_ID",
							"type": "Expression"
						},
						"workspace_url": {
							"value": "@pipeline().globalParameters.GL_DATABRICKS_URL",
							"type": "Expression"
						},
						"job_id": {
							"value": "@pipeline().globalParameters.GL_JOB_ID",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_DATABRICKS",
					"type": "LinkedServiceReference",
					"parameters": {
						"Databricks_Workspace_URL": {
							"value": "@pipeline().globalParameters.GL_DATABRICKS_URL",
							"type": "Expression"
						},
						"Cluster_id": {
							"value": "@pipeline().globalParameters.GL_CLUSTER_ID",
							"type": "Expression"
						}
					}
				}
			}
		],
		"folder": {
			"name": "DATA INGESTION"
		},
		"annotations": [],
		"lastPublishTime": "2024-12-09T12:48:36Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}